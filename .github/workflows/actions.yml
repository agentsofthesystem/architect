# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches:
      - '*'         # matches every branch that doesn't contain a '/'
      - '*/*'       # matches every branch containing a single '/'
      - '**'        # matches every branch
      - '!feature-test-*' # Ignore this branch pattern. Good for saving ideas/trial code.

permissions:
  contents: read

env:
  AWS_REGION:  ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: architect

jobs:

  build_main:

    runs-on: ubuntu-latest

    steps:

    - uses: actions/checkout@v3

    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"

    - name: Install ubuntu packages.
      run: sudo apt-get install -y libcurl4-nss-dev libssl-dev

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Python Black
      uses: psf/black@stable
      with:
        options: "--check --verbose"
        src: "."
        version: "~= 22.0"

    - name: flake8 Lint
      uses: py-actions/flake8@v2
      with:
        exclude: "tests/*,doc/*"
        max-line-length: "100"

    # TODO - Uncomment when pytests work again.
    # - name: Test with pytest
    #   run: |
    #     pytest
    # - name: Run PyInstaller
    #   run: |
    #     python package.py

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        #IMAGE_TAG: ${{ github.sha }}
        IMAGE_TAG: develop
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
