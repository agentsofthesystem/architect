version: "3.9"

# NOTE - Docker Compose is STRICTLY Meant for develop purpose.

x-common-variables: &common-variables
  SQL_DATABASE_USER: admin
  SQL_DATABASE_PASS: REPLACEME
  SQL_DATABASE_SERVER: mariadb-service
  SQL_DATABASE_NAME: app
  CELERY_BACKED_BY: REDIS

  # Either use these two to supply User Access Key ID / Secret
  AWS_ACCESS_KEY_ID: REPLACEME
  AWS_SECRET_ACCESS_KEY: REPLACEME

  # Or uncomment and use these two to simulate using STS Task IAM Role
  #CELERY_SQS_PREDEFINED_QUEUE: REPLACEME
  #AWS_CONTAINER_CREDENTIALS_RELATIVE_URI: /creds

services:

  web:
    profiles: ["dev", "deploy"]
    depends_on:
      - "tasks"
    image: architect:dev_test
    restart: on-failure
    build:
      context: ./
      dockerfile: Dockerfile
    volumes:
      - "./application:/var/application"
    ports:
      - "3000:3000"
    environment:
      <<: *common-variables
    networks:
      credentials_network:
        ipv4_address: "169.254.170.3"

  tasks:
    profiles: ["dev", "deploy"]
    image: architect:dev_test
    #restart: on-failure
    build:
      context: ./
      dockerfile: Dockerfile
    volumes:
      - "./application:/var/application"
    command: "celery -A application.wsgi_worker:WORKER worker -l DEBUG --beat -l DEBUG -c 2"
    environment:
      <<: *common-variables
    networks:
      credentials_network:
        ipv4_address: "169.254.170.4"

  # Note - One must have aws cli installed and credentials set to user that has a trust relationship
  # with the Task ECS Role associated with it.
  ecs-local-endpoints:
    profiles: ["dev"]
    image: amazon/amazon-ecs-local-container-endpoints
    volumes:
      - /var/run:/var/run
      - $HOME/.aws/:/home/.aws/
    ports:
      - "8888:80"  # Local debugging can use port 8888
    environment:
      HOME: "/home"
      AWS_PROFILE: "default"
    networks:
      credentials_network:
        ipv4_address: "169.254.170.2"

  redis-service:
    profiles: ["dev"]
    image: redis:7.2-alpine
    restart: always
    ports:
      - 6379:6379
    networks:
      credentials_network:
        ipv4_address: "169.254.170.5"

  mariadb-service:
    profiles: ["dev"]
    image: mariadb:11
    restart: always
    ports:
      - 3306:3306
    environment:
      MARIADB_DATABASE: app
      MARIADB_USER: admin
      MARIADB_PASSWORD: REPLACEME
      MARIADB_ROOT_PASSWORD: REPLACEME  # Change Me!
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      credentials_network:
        ipv4_address: "169.254.170.6"

  adminer:
    profiles: ["dev"]
    depends_on:
      - "mariadb-service"
    image: adminer:4.8.1-standalone
    restart: always
    ports:
      - 8080:8080
    networks:
      credentials_network:
        ipv4_address: "169.254.170.7"

volumes:
  mysql-data:

networks:
  credentials_network:
    driver: bridge
    ipam:
      config:
        - subnet: "169.254.170.0/24"
          gateway: "169.254.170.1"